import React, { useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import {
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  OutlinedInput,
  Box,
  Grid,
} from "@mui/material";
import { useAppointmentContext } from "./AppointmentContext"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç
import "react-datepicker/dist/react-datepicker.css";
import {
  initialValues,
  procedure,
  validationSchema,
  calculatePrice,
} from "./initialAndShema";
import InputMask from "react-input-mask"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
import Chip from "@mui/material/Chip"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Chip
import { initializeApp } from "firebase/app";
import { getFirestore, deleteDoc, doc } from "firebase/firestore";
import axios from "axios";
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyBQFTiKg7DCKv2kCZ_CjzG_9Po-imwtmeM",
  authDomain: "ira-site.firebaseapp.com",
  projectId: "ira-site",
  storageBucket: "ira-site.appspot.com",
  messagingSenderId: "16883500777",
  appId: "1:16883500777:web:a0183e891718ac732d5278",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

const AppointmentForm = () => {
  const [isTrainingSelected, setIsTrainingSelected] = useState(false);
  const [totalPrice, setTotalPrice] = useState(0); // State to store the total price
  const { selectedSession, clearSelectedSession } = useAppointmentContext(); // –ü–æ–ª—É—á–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∞–Ω—Å –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –µ–≥–æ –æ—á–∏—Å—Ç–∫–∏

  const handleProcedureChange = (selectedProcedures) => {
    // Calculate the price when procedures change
    const price = calculatePrice(selectedProcedures);
    setTotalPrice(price);

    // Check if "–ù–∞–≤—á–∞–Ω–Ω—è" is selected
    const isTrainingSelected = selectedProcedures.includes("–ù–∞–≤—á–∞–Ω–Ω—è");
    setIsTrainingSelected(isTrainingSelected);
  };

  const sendTG = async (values) => {
    try {
      const TOKEN = "5347978233:AAHvtXwjvqX4vp2C4crq-sbjqnjDOzrnM48";
      const CHAT_ID = "-1001722621027";
      const URL_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

      let text = `
        ‚ú® –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å ‚ú®
        ‚ö™ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${values.client} 
        üíå –¢–µ–ª–µ—Ñ–æ–Ω: ${values.phone}
        –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: ${values.procedure.join(", ")}
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: ${values.contacts}
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${values.note}
        –¶–µ–Ω–∞: ${totalPrice} –≥—Ä–Ω
        `;

      // –î–æ–±–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–µ "–ù–∞–≤—á–∞–Ω–Ω—è"
      if (!isTrainingSelected) {
        text += `\n‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${values.formatDate}`;
      }

      await axios.post(URL_API, {
        chat_id: CHAT_ID,
        parse_mode: "html",
        text,
      });
    } catch (error) {
      console.log(error);
    }
  };

  const handleSubmit = async (values, { resetForm }) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ "–ù–∞–≤—á–∞–Ω–Ω—è"
      const isTrainingSelected = values.procedure.includes("–ù–∞–≤—á–∞–Ω–Ω—è");

      if (!selectedSession && !isTrainingSelected) {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å");
        return;
      }
      const formatDate = selectedSession
        ? selectedSession.date.toDate().toLocaleString("ru-UA", {
            day: "numeric",
            month: "numeric",
            year: "numeric",
            hour: "numeric",
            minute: "numeric",
          })
        : "";

      // –ï—Å–ª–∏ "–ù–∞–≤—á–∞–Ω–Ω—è" –≤—ã–±—Ä–∞–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      const dateAndTime = isTrainingSelected ? "" : formatDate;

      if (!isTrainingSelected) {
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ "–ù–∞–≤—á–∞–Ω–Ω—è", —É–¥–∞–ª—è–µ–º —Å–µ–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const sessionRef = doc(db, "sessions", selectedSession.id);
        await deleteDoc(sessionRef);
      }

      await sendTG({ ...values, formatDate: dateAndTime });
      // –û—á–∏—Å—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∞–Ω—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      clearSelectedSession();

      resetForm({
        values: { ...initialValues, totalPrice: 0 },
      });
      setTotalPrice(0);

      alert(`–î—è–∫—É—é, —á–µ–∫–∞—é –≤–∞—Å ${formatDate}`);
      window.location.reload();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    }
  };

  return (
    <Grid
      item
      xs={12}
      md={6}
      className="appointment-form"
      sx={{ marginTop: "55px", justifyContent: "center" }}
    >
      <h2>–ó–∞–ø–∏—Å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É</h2>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, setFieldValue }) => (
          <Form>
            <Field
              name="client"
              component={TextField}
              label="–Ü–º'—è *"
              fullWidth
              margin="normal"
              variant="outlined"
              // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ value, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ TextField
              value={values.client}
              onChange={(e) => setFieldValue("client", e.target.value)} // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setFieldValue –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
            />
            <ErrorMessage name="client" component="div" className="error" />
            <Field name="phone">
              {({ field }) => (
                <InputMask
                  {...field}
                  mask="+380999999999"
                  placeholder="+380"
                  maskChar="_"
                >
                  {(inputProps) => (
                    <TextField
                      label="–¢–µ–ª–µ—Ñ–æ–Ω *"
                      fullWidth
                      margin="normal"
                      variant="outlined"
                      {...inputProps}
                    />
                  )}
                </InputMask>
              )}
            </Field>
            <ErrorMessage name="phone" component="div" className="error" />

            <FormControl
              fullWidth
              margin="normal"
              variant="outlined"
              // sx={{ zIndex: 100 }}
            >
              <InputLabel htmlFor="procedure">–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ *</InputLabel>
              <Select
                name="procedure"
                labelId="procedure-label"
                id="procedure"
                multiple
                value={values.procedure}
                onChange={(e) => {
                  const selectedProcedures = e.target.value;
                  setFieldValue("procedure", selectedProcedures);

                  // Handle procedure change to update the price
                  handleProcedureChange(selectedProcedures);

                  // –ï—Å–ª–∏ "–ù–∞–≤—á–∞–Ω–Ω—è" –≤—ã–±—Ä–∞–Ω–æ, —Å–Ω–∏–º–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                  if (isTrainingSelected) {
                    setFieldValue(
                      "procedure",
                      selectedProcedures.filter((item) => item === "–ù–∞–≤—á–∞–Ω–Ω—è")
                    );
                  }
                }}
                input={<OutlinedInput id="procedure" label="–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ *" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {selected.map((value) => (
                      <Chip
                        label={value}
                        onDelete={(e) => {
                          // Prevent the default behavior (opening the select)
                          e.stopPropagation();

                          // Remove the selected procedure from the values.procedure array
                          const updatedProcedures = values.procedure.filter(
                            (item) => item !== value
                          );

                          // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                          setFieldValue("procedure", updatedProcedures);

                          // Handle procedure change to update the price
                          handleProcedureChange(updatedProcedures);
                        }}
                      />
                    ))}
                  </Box>
                )}
              >
                {procedure.map((name) => (
                  <MenuItem key={name} value={name}>
                    {name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <ErrorMessage name="procedure" component="div" className="error" />

            <Field
              component={TextField}
              name="contacts"
              label="–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç"
              fullWidth
              placeholder="viber/telegram/instagram"
              margin="normal"
              variant="outlined"
              // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ value, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ TextField
              value={values.contacts}
              onChange={(e) => setFieldValue("contacts", e.target.value)} // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setFieldValue –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
            />

            <Field
              component={TextField}
              name="note"
              label="–ü—Ä–∏–º—ñ—Ç–∫–∞"
              fullWidth
              margin="normal"
              variant="outlined"
              multiline
              rows={2}
              // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ value, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ TextField
              value={values.note}
              onChange={(e) => setFieldValue("note", e.target.value)} // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setFieldValue –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
            />
            {!isTrainingSelected && (
              <div>
                –î–∞—Ç–∞ —Å–µ–∞–Ω—Å—É:{" "}
                {selectedSession ? (
                  selectedSession.date.toDate().toLocaleString("ru-UA", {
                    day: "numeric",
                    month: "numeric",
                    year: "numeric",
                    hour: "numeric",
                    minute: "numeric",
                  })
                ) : (
                  <strong>–ù–µ –≤–∏–±—Ä–∞–Ω–æ !</strong>
                )}
              </div>
            )}
            <div className="total-price">
              <p>–¶—ñ–Ω–∞: {totalPrice} –≥—Ä–Ω</p>
            </div>

            <Button type="submit" variant="contained" color="secondary">
              –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å
            </Button>
          </Form>
        )}
      </Formik>
    </Grid>
  );
};

export default AppointmentForm;
